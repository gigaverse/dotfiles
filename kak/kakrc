# Basic settings
set-option global tabstop 2
set-option global indentwidth 0
add-highlighter global/ number-lines -relative -hlcursor
add-highlighter global/ wrap
add-highlighter global/ show-matching

# Load plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/fzf.kak"

plug "TeddyDD/kakoune-wiki"
plug 'delapouite/kakoune-livedown'

plug "ul/kak-lsp" do %{
  cargo install --locked --force --path .
}

plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}

plug 'delapouite/kakoune-text-objects' %{
  text-object-map
}

plug 'delapouite/kakoune-buffers' %{
  map global normal ^ q
  map global normal <a-^> Q
  map global normal q b
  map global normal Q B
  map global normal <a-q> <a-b>
  map global normal <a-Q> <a-B>
  map global normal b ': enter-buffers-mode<ret>' -docstring 'buffers'
  map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
}

wiki-setup %sh{ echo $HOME/wiki }

# Colemak
map global normal f e
map global normal F E
map global normal k n
map global normal K N
map global normal l s
map global normal s i
map global normal h h
map global normal i l
map global normal e k
map global normal n j


# Extra bindings
map global normal <c-p> ': fzf-mode<ret>'

hook global WinSetOption filetype=asciidoc %{
    set-option window lintcmd "proselint"
}

def ide %{
    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

    new rename-client docs
    set global docsclient docs
}

# Rust
hook global WinSetOption filetype=rust %{
    hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
    hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
    hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
    hook -once -always window WinSetOption filetype=.* %{
    	remove-hooks window rust-inlay-hints
    }
}

set-option global lsp_server_configuration rust.clippy_preference="on"

hook global BufSetOption filetype=rust %{
    set-option buffer formatcmd 'rustfmt'
}

hook global WinSetOption filetype=<language> %{
	hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
	hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
	hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
	hook -once -always window WinSetOption filetype=.* %{
		remove-hooks window semantic-tokens
	}
}

hook global WinSetOption filetype=python %{
    set-option window lintcmd %{ run() { pylint --msg-template='{path}:{line}:{column}: {category}: {msg_id}: {msg} ({symbol})' "$1" | awk -F: 'BEGIN { OFS=":" } { if (NF == 6) { $3 += 1; print } }'; } && run }
}

hook global WinSetOption filetype=python %{
    set-option window lintcmd "flake8 --filename='*' --format='%%(path)s:%%(row)d:%%(col)d: error: %%(text)s' --ignore=E121,E123,E126,E226,E24,E704,W503,W504,E501,E221,E127,E128,E129,F405"
}

hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
    lsp-enable-window
    lsp-auto-hover-enable
    set global lsp_hover_anchor true
}

# Clipboard copy-paste
evaluate-commands %sh{
	case $(uname) in
		Linux) copy="xclip -i"; paste="xclip -o" ;;
		Darwin)  copy="pbcopy"; paste="pbpaste" ;;
	esac

	printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
	printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
	printf "map global user -docstring 'yank to primary' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 primary}<ret>'\n" "$copy"
	printf "map global user -docstring 'yank to clipboard' Y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy -selection clipboard"
	printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}
